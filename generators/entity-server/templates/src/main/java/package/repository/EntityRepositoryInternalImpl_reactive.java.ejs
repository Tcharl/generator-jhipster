<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.repository;

import java.util.function.BiFunction;
<%_ if (fieldsContainBigDecimal) { _%>
import java.math.BigDecimal;
<%_} if (fieldsContainInstant) { _%>
import java.time.Instant;
<%_ } if (fieldsContainLocalDate) { _%>
import java.time.LocalDate;
<%_ } if (fieldsContainZonedDateTime) { _%>
import java.time.ZonedDateTime;
<%_ } if (fieldsContainDuration) { _%>
import java.time.Duration;
<%_ } if (fieldsContainUUID) { _%>
import java.util.UUID;
<%_ } _%>
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import org.springframework.data.domain.Pageable;
<%_ if (databaseTypeSql) { _%>
import io.r2dbc.spi.Row;
import io.r2dbc.spi.RowMetadata;
import org.springframework.data.r2dbc.convert.R2dbcConverter;
import org.springframework.data.r2dbc.core.R2dbcEntityOperations;
import org.springframework.data.r2dbc.core.R2dbcEntityTemplate;
import org.springframework.data.r2dbc.repository.support.SimpleR2dbcRepository;
import org.springframework.data.relational.core.query.Criteria;
import org.springframework.data.relational.core.sql.Column;
import org.springframework.data.relational.core.sql.Expression;
import org.springframework.data.relational.core.sql.Select;
import org.springframework.data.relational.core.sql.SelectBuilder.SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %>;
import org.springframework.data.relational.core.sql.Table;
import org.springframework.data.relational.repository.support.MappingRelationalEntityInformation;
import org.springframework.r2dbc.core.DatabaseClient;
import org.springframework.r2dbc.core.RowsFetchSpec;
<%_ } _%>

import <%= entityAbsolutePackage %>.domain.<%= persistClass %>;
<% relationships.forEach(function(rel) {
  if (rel.relationshipManyToMany && rel.ownerSide) { _%>
import <%= rel.otherEntity.entityAbsolutePackage %>.domain.<%= rel.otherEntity.persistClass %>;
  <%_ } _%>
<%_ }); _%>
<%_ Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%= entityAbsolutePackage %>.domain.enumeration.<%= element %>;
<%_ }); _%>

<%_ [...reactiveOtherEntities, entity].forEach(otherEntity => { _%>
import <%= otherEntity.entityAbsolutePackage %>.repository.rowmapper.<%= otherEntity.entityClass %>RowMapper;
  <%_ if (otherEntity.entityPackage !== entityPackage) { _%>
import <%= otherEntity.entityAbsolutePackage %>.repository.<%= otherEntity.entityClass %>SqlHelper;
  <%_ } _%>
<%_ }); _%>
import <%= packageName %>.service.EntityManager;
<%_ if (fieldsContainOwnerManyToMany) { _%>
import <%= packageName %>.service.EntityManager.LinkTable;
<%_ } _%>

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Spring Data <%= officialDatabaseType %> reactive custom repository implementation for the <%= persistClass %> entity.
 */
@SuppressWarnings("unused")
class <%= entityClass %>RepositoryInternalImpl extends SimpleR2dbcRepository<<%= persistClass %>, <%= primaryKey.type %>> implements <%= entityClass %>RepositoryInternal {
    private final DatabaseClient db;
    private final R2dbcEntityTemplate r2dbcEntityTemplate;
    private final EntityManager entityManager;

<%_ reactiveUniqueEntityTypes.forEach(function(element) { _%>
    private final <%= element %>RowMapper <%= element.toLowerCase() %>Mapper;
<%_ }); _%>

    private final static Table entityTable = Table.aliased("<%= entityTableName %>", EntityManager.ENTITY_ALIAS);
<%_ reactiveEagerRelations.forEach(function(rel) { _%>
    private final static Table <%= rel.relationshipName %>Table = Table.aliased("<%= rel.otherEntityTableName %>", "<%= _generateSqlSafeName(rel.relationshipName) %>");
<%_ }); _%>

<%_ relationships.forEach(function(rel) {
  if (rel.shouldWriteJoinTable) {
_%>
    private final static EntityManager.LinkTable <%= rel.relationshipName %>Link = new LinkTable("<%= rel.joinTable.name %>", "<%= getColumnName(name) %>_id", "<%= getColumnName(rel.relationshipName) %>_id");
<%_ }
}); _%>

    public <%= entityClass %>RepositoryInternalImpl(R2dbcEntityTemplate template, EntityManager entityManager<%_
            reactiveUniqueEntityTypes.forEach(function(element) { _%>, <%= element %>RowMapper <%= element.toLowerCase() %>Mapper<%_ }); _%>, R2dbcEntityOperations entityOperations,
        R2dbcConverter converter) {
        super(new MappingRelationalEntityInformation(converter.getMappingContext().getRequiredPersistentEntity(<%= entityClass %>.class)), entityOperations, converter);
        this.db = template.getDatabaseClient();
        this.r2dbcEntityTemplate = template;
        this.entityManager = entityManager;
<%_ reactiveUniqueEntityTypes.forEach(function(element) { _%>
        this.<%= element.toLowerCase() %>Mapper = <%= element.toLowerCase() %>Mapper;
<%_ }); _%>
    }

    @Override
    public Flux<<%= persistClass %>> findAllBy(Pageable pageable) {
        return findAllBy(pageable, null);
    }

    @Override
    public Flux<<%= persistClass %>> findAllBy(Pageable pageable, Criteria criteria) {
        return createQuery(pageable, criteria).all();
    }

    RowsFetchSpec<<%= persistClass %>> createQuery(Pageable pageable, Criteria criteria) {
        List<Expression> columns = <%= persistClass %>SqlHelper.getColumns(entityTable, EntityManager.ENTITY_ALIAS);
<%_ reactiveEagerRelations.forEach(function(rel) { _%>
        columns.addAll(<%= rel.otherEntityNameCapitalized %>SqlHelper.getColumns(<%= rel.relationshipName %>Table, "<%= rel.relationshipName %>"));
<%_ }); _%>
        SelectFromAndJoin<% if (reactiveEagerRelations.length > 0) { %>Condition<% } %> selectFrom = Select.builder().select(columns).from(entityTable)<%_ reactiveEagerRelations.forEach(function(rel) {
            const colName = _getJoinColumnName(rel); %>
            .leftOuterJoin(<%= rel.relationshipName %>Table).on(Column.create("<%= colName %>", entityTable)).equals(Column.create("id", <%= rel.relationshipName %>Table ))<%_ }); _%>;

        String select = entityManager.createSelect(selectFrom, <%= persistClass %>.class, pageable, criteria);
        return db.sql(select).map(this::process);
    }

<%_ if (fieldsContainOwnerManyToMany) { _%>

    @Override
    public Mono<<%= persistClass %>> findOneWithEagerRelationships(<%= primaryKey.type %> id) {
        return findById(id);
    }

    @Override
    public Flux<<%= persistClass %>> findAllWithEagerRelationships() {
        return findAll();
    }

    @Override
    public Flux<<%= persistClass %>> findAllWithEagerRelationships(Pageable page) {
        return findAllBy(page);
    }

<%_ } _%>
    private <%= persistClass %> process(Row row, RowMetadata metadata) {
        <%= persistClass %> entity = <%= entityClass.toLowerCase() %>Mapper.apply(row, "e");
<%_ reactiveEagerRelations.forEach(function(rel) { _%>
        entity.set<%= rel.relationshipNameCapitalized %>(<%= rel.otherEntityNameCapitalized.toLowerCase() %>Mapper.apply(row, "<%= rel.relationshipName %>"));
<%_ }); _%>
        return entity;
    }

<%_ if (isUsingMapsId) { _%>
    @Override
    public <S extends <%= persistClass %>> Mono<S> save(S entity) {
        if (entity.get<%= primaryKey.nameCapitalized %>() == null && entity.get<%= mapsIdAssoc.relationshipNameCapitalized %>() != null) {
            entity.set<%= primaryKey.nameCapitalized %>(entity.get<%= mapsIdAssoc.relationshipNameCapitalized %>().get<%= mapsIdAssoc.otherEntity.primaryKey.nameCapitalized %>());
            return entityManager.insert(entity);
        }
        return super.save(entity);
    }
<%_ } _%>
}
